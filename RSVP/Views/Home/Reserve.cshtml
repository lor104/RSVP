@model RSVP.Infrastucture.Models.ViewModels.ReservationViewModel
@{
    ViewBag.Title = "RSVP";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="content rsvp">
    @using (Html.BeginForm("Reserve", "Home", FormMethod.Post, new { id = "reservation-form" }))
    {
        @Html.HiddenFor(x => x.Guest.GuestId)
        <div class="page-title">
            <h2>Welcome, @Model.Guest.FullName</h2>
        </div>

        <div class="form-input">
            @Html.LabelFor(x => Model.AttendeeEmail)
            @Html.TextBoxFor(x => Model.AttendeeEmail, new { @class = "form-control" })
            @Html.ValidationMessageFor(x => Model.AttendeeEmail)
        </div>

        <!-- Most validation will be handled on the backend -->
        for (int i = 0; i < Model.ReplyList.Count; i++)
        {
            @Html.HiddenFor(x => Model.ReplyList[i].Event.EventId)
            <div class="event-group" eventId="@Model.ReplyList[i].Event.EventId">
                <div class="page-title">
                    <p class="italic">@Model.ReplyList[i].Event.Subtitle</p>
                </div>
                <div class="event-group-line event-attending">
                    <div>
                        <p class="">Will you be joining us on @Model.ReplyList[i].Event.StartDate.ToString("dddd, MMMM d") at @Model.ReplyList[i].Event.Venue, for @Model.ReplyList[i].Event.Subtitle?</p>
                    </div>
                    @Html.HiddenFor(x => Model.ReplyList[i].Attending)
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-accept @(Model.ReplyList[i].Attending.HasValue && Model.ReplyList[i].Attending.Value == true ? "selected" : "")">joyfully accept</button>
                        <button type="button" class="btn btn-sm btn-decline @(Model.ReplyList[i].Attending.HasValue && Model.ReplyList[i].Attending.Value != true ? "selected" : "")">regretfully decline</button>
                    </div>
                    @Html.ValidationMessageFor(x => Model.ReplyList[i].Attending)
                </div>
                <div class="event-group-line event-meal">
                    @Html.LabelFor(x => Model.ReplyList[i].SelectedMeal)
                    @Html.HiddenFor(x => Model.ReplyList[i].SelectedMeal)
                    <div class="btn-group">
                        @for (int e = 0; e < Model.ReplyList[i].EventMeals.Count; e++)
                        {
                            var meal = @Model.ReplyList[i].EventMeals[e];
                            <button type="button" mealId="@meal.MealId" class="btn btn-sm btn-meal @(Model.ReplyList[i].SelectedMeal.HasValue && Model.ReplyList[i].SelectedMeal.Value == meal.MealId ? "selected" : "")">@meal.Name</button>
                        }
                    </div>
                    @Html.ValidationMessageFor(x => Model.ReplyList[i].SelectedMeal)
                </div>
                <div class="event-group-line event-notes">
                    @Html.LabelFor(x => Model.ReplyList[i].Notes)
                    @Html.TextAreaFor(x => Model.ReplyList[i].Notes)
                </div>
                @if (Model.ReplyList[i].Event.Title == "Ceremony" && !Model.Guest.IsChild)
                {
                    <div class="event-group-line event-parking">
                        <label>Will you be needing parking at @Model.ReplyList[i].Event.Venue? If so, please fill in your license plate below so we can have it prepaid for you.</label>
                        @Html.TextBoxFor(x => Model.ReplyList[i].LicensePlate)
                    </div>
                }
            </div>
        }
        if (Model.Guest.CanBringGuest)
        {
            <div class="event-group">
                <div class="event-group-line event-guest">
                    <label>Will you be bringing a guest?</label>
                    @Html.HiddenFor(x => Model.IsBringingGuest)
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-yes @(Model.IsBringingGuest.HasValue && Model.IsBringingGuest.Value == true ? "selected" : "")">yes</button>
                        <button type="button" class="btn btn-sm btn-no @(Model.IsBringingGuest.HasValue && Model.IsBringingGuest.Value != true ? "selected" : "")">no</button>
                    </div>
                    @Html.ValidationMessageFor(x => Model.IsBringingGuest)
                </div>
                <div class="event-group-line event-guest-info">
                    <div class="form-input">
                        @Html.LabelFor(x => Model.GuestFirstName)
                        @Html.TextBoxFor(x => Model.GuestFirstName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => Model.GuestFirstName)
                    </div>
                    <div class="form-input">
                        @Html.LabelFor(x => Model.GuestLastName)
                        @Html.TextBoxFor(x => Model.GuestLastName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => Model.GuestLastName)
                    </div>
                </div>
            </div>
        }
        <div class="form-input">
            <input class="form-control" type="submit" value="Submit" />
        </div>
    }
</div>

@section scripts {
    <script>
        $(function () {
            // Init
            initialize();

            function initialize() {
                $(".btn-accept.selected").each(function (k, v) {
                    accept($(v));
                });
                $(".btn-decline.selected").each(function (k, v) {
                    decline($(v));
                });

                $yesBtn = $(".btn-yes.selected").length ? $(".btn-yes.selected") : null;
                $noBtn = $(".btn-no.selected").length ? $(".btn-no.selected") : null;

                if ($yesBtn) {
                    yes($yesBtn);
                }
                else if ($noBtn) {
                    no($noBtn);
                } else {
                    showHideGuestInfo($(".btn-no"), false);
                }
            }

            // ********************** Register events **********************
            $(".btn-accept").on("click", accept);
            $(".btn-decline").on("click", decline);
            $(".btn-meal").on("click", selectMeal);
            $(".btn-yes").on("click", yes);
            $(".btn-no").on("click", no);


            // ********************** Button functions **********************
            // Attending buttons
            function accept($acceptBtn) {
                let $btn = null;
                if ($acceptBtn instanceof jQuery.Event) {
                    $btn = $(this)
                }
                else {
                    $btn = $acceptBtn;
                }
                findHidden($btn).val('True');
                setSelected($btn);
                showHideDeclinedEvent($btn, true);
            }

            function decline($declineBtn) {
                let $btn = null;
                if ($declineBtn instanceof jQuery.Event) {
                    $btn = $(this)
                } else {
                    $btn = $declineBtn;
                }
                findHidden($btn).val('False');
                setSelected($btn);
                showHideDeclinedEvent($btn, false);
            }

            function yes($yesBtn) {
                let $btn = null;
                if ($yesBtn instanceof jQuery.Event) {
                    $btn = $(this)
                }
                else {
                    $btn = $yesBtn;
                }
                findHidden($btn).val('True');
                setSelected($btn);
                showHideGuestInfo($btn, true);
            }

            function no($noBtn) {
                let $btn = null;
                if ($noBtn instanceof jQuery.Event) {
                    $btn = $(this)
                } else {
                    $btn = $noBtn;
                }
                findHidden($btn).val('False');
                setSelected($btn);
                showHideGuestInfo($btn, false);
            }

            function showHideDeclinedEvent($attendBtn, show) {
                let $parent = $attendBtn.parents(".event-attending");
                if (show) {
                    $parent.siblings(".event-meal").slideDown();
                    $parent.siblings(".event-notes").slideDown();
                    $parent.siblings(".event-parking").slideDown();
                } else {
                    $parent.siblings(".event-meal").slideUp();
                    $parent.siblings(".event-notes").slideUp();
                    $parent.siblings(".event-parking").slideUp();
                }
            }

            function showHideGuestInfo($attendBtn, show) {
                let $parent = $attendBtn.parent().parent();
                if (show) {
                    $parent.siblings(".event-guest-info").slideDown();
                } else {
                    $parent.siblings(".event-guest-info").slideUp();
                }
            }

            function setSelected($btn) {
                $btn.siblings().removeClass('selected');
                $btn.addClass('selected');
            }

            // Meal buttons
            function selectMeal() {
                let $btn = $(this);
                findHidden($btn).val($btn.attr('mealid'));
                setSelected($btn);
            }

            // ********************** Utility **********************
            // Find's the hidden field associated to input buttons.
            function findHidden($btn) {
                return $btn.parent().siblings("input[type='hidden']");
            }
        });
    </script>
}